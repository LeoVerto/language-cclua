'.source.lua':
#Common Snippets
  'multiline comment':
    'prefix': '-['
    'body': '--[[ ${0:comment...}]'
  'nested multiline comment':
    'prefix': '=['
    'body': '--[=[ ${0:comment...}]='
  'function':
    'prefix': 'fun'
    'body': 'function ${1:FunctionName} (${2:args})\n\t${0:-- body...}\nend'
  'anon function':
    'prefix': 'afun'
    'body': '${1:FunctionName} = function (${2:args})\n\t${0:-- body...}\nend'
  'while loop':
    'prefix': 'while'
    'body': 'while ${1:condition} do\n\t${0:-- body...}\nend'
  'while loop shortcut':
    'prefix': 'whi'
    'body': 'while ${1:condition} do\n\t${0:-- body...}\nend'
  'repeat loop':
    'prefix': 'repeat'
    'body': 'repeat\n\t${0:-- body...}\nuntil ${1:condition}'
  'repeat loop shortcut':
    'prefix': 'rep'
    'body': 'repeat\n\t${0:-- body...}\nuntil ${1:condition}'
  'for i,v in ipairs()':
    'prefix': 'fori'
    'body': 'for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:-- body...}\nend'
  'for i=1,10':
    'prefix': 'for'
    'body': 'for ${1:i}=${2:1},${3:10} do\n\t${0:-- body...}\nend'
  'for k,v in pairs()':
    'prefix': 'forp'
    'body': 'for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:-- body...}\nend'
  'local function':
    'prefix': 'lfun'
    'body': 'local function ${1:FunctionName} (${2:args})\n\t${0:-- body...}\nend'
  'local variable definition':
    'prefix': 'local'
    'body': 'local ${1:x} = ${0:1}'
  'local variable definition shortcut':
    'prefix': 'loc'
    'body': 'local ${1:x} = ${0:1}'
  'local table definition':
    'prefix': 'ltab'
    'body': 'local ${0:name} = {}'
  'return definition':
    'prefix': 'return'
    'body': 'return ${0:value}'
  'return definition shortcut':
    'prefix': 'ret'
    'body': 'return ${0:value}'
  'print':
    'prefix': 'print'
    'body': 'print("${0:logging}")'
  'require':
    'prefix': 'require'
    'body': 'local ${0:name} = require "${1:module}"'
  'require shortcut':
    'prefix': 'req'
    'body': 'local ${0:name} = require "${1:module}"'
  'if conditional':
    'prefix': 'if',
    'body': 'if ${1:value} then\n\t${0:--body...}\nend'
  'if else conditional':
    'prefix': 'ife',
    'body': 'if ${1:value} then\n\t${0:--body...}\nelse\n\t${1:--body...}\nend'
  'if not conditional':
    'prefix': 'ifn',
    'body': 'if not ${1:value} then\n\t${0:--body...}\nend'
  'if not else conditional':
    'prefix': 'ifne',
    'body': 'if not ${1:value} then\n\t${0:--body...}\nelse\n\t${1:--body...}\nend'
# Table Manipulation Snippets
  'table definition':
    'prefix': 'tab'
    'body': '${0:name} = {}'
  'table.insert':
    'prefix': 'tabi',
    'body': 'table.insert(${0:tableName},${1:data})'
  'table.foreach':
    'prefix': 'tabf',
    'body': 'table.foreach(${0:tableName},${1:function})'
  'table.concat':
    'prefix': 'tabc'
    'body': 'table.concat(${1:tableName}${2:, " "}${3:, start_index}${4:, end_index})'
  'table.sort':
    'prefix': 'tabs',
    'body': 'table.sort(${1:tableName}${2:, sortfunction})'
  'table.remove':
    'prefix': 'tabr',
    'body': 'table.remove(${1:tableName}${2:, position})'
  'table.maxn':
    'prefix': 'tabm',
    'body': 'table.maxn(${1:tableName})'
# Math Snippets
  'math.abs':
    'prefix': 'abs',
    'body': 'math.abs(${0:x})'
  'math.acos':
    'prefix': 'acos',
    'body': 'math.acos(${0:x})'
  'math.asin':
    'prefix': 'asin',
    'body': 'math.asin(${0:x})'
  'math.atan':
    'prefix': 'atan',
    'body': 'math.atan(${0:x})'
  'math.atan2':
    'prefix': 'atan2',
    'body': 'math.atan2(${0:y}, ${1:x})'
  'math.ceil':
    'prefix': 'ceil',
    'body': 'math.ceil(${0:x})'
  'math.cos':
    'prefix': 'cos',
    'body': 'math.cos(${0:x})'
  'math.cosh':
    'prefix': 'cosh',
    'body': 'math.cosh(${0:x})'
  'math.deg':
    'prefix': 'deg',
    'body': 'math.deg(${0:x})'
  'math.exp':
    'prefix': 'exp',
    'body': 'math.exp(${0:x})'
  'math.floor':
    'prefix': 'floor',
    'body': 'math.floor(${0:x})'
  'math.fmod':
    'prefix': 'fmod',
    'body': 'math.fmod(${0:x}, ${1:y})'
  'math.frexp':
    'prefix': 'frexp',
    'body': 'math.frexp(${0:x})'
  'math.huge':
    'prefix': 'huge',
    'body': 'math.huge'
  'math.ldexp':
    'prefix': 'ldexp',
    'body': 'math.ldexp(${0:m}, ${1:e})'
  'math.log':
    'prefix': 'log',
    'body': 'math.log(${0:x})'
  'math.log10':
    'prefix': 'log10',
    'body': 'math.log10(${0:x})'
  'math.max':
    'prefix': 'max',
    'body': 'math.max(${0:x}, ${1:...})'
  'math.min':
    'prefix': 'min',
    'body': 'math.min(${0:x}, ${1:...})'
  'math.pi':
    'prefix': 'pi',
    'body': 'math.pi'
  'math.pow':
    'prefix': 'pow',
    'body': 'math.pow(${0:x}, ${1:y})'
  'math.rad':
    'prefix': 'rad',
    'body': 'math.rad(${0:x})'
  'math.random':
    'prefix': 'random',
    'body': 'math.random(${0:m}, ${1:n})'
  'math.randomseed':
    'prefix': 'randomseed',
    'body': 'math.randomseed(${0:x})'
  'math.sin':
    'prefix': 'sin',
    'body': 'math.sin(${0:x})'
  'math.sinh':
    'prefix': 'sinh',
    'body': 'math.sinh(${0:x})'
  'math.sqrt':
    'prefix': 'sqrt',
    'body': 'math.sqrt(${0:x})'
  'math.tan':
    'prefix': 'tan',
    'body': 'math.tan(${0:x})'
  'math.tanh':
    'prefix': 'tanh',
    'body': 'math.tanh(${0:x})'
# ComputerCraft begins here
# CC 'Bit'
  'bit.blshift':
    'prefix': 'blshift',
    'body': 'bit.blshift(${1:n}, ${2:bits})'
  'bit.brshift':
    'prefix': 'brshift',
    'body': 'bit.brshift(${1:n}, ${2:bits})'
  'bit.blogic rshift':
    'prefix': 'bit.blogic_rshift',
    'body': 'bit.blogic_rshift(${1:n}, ${2:bits})'
  'bit.bxor':
    'prefix': 'bit.bxor',
    'body': 'bit.bxor(${1:m}, ${2:n})'
  'bit.bor':
    'prefix': 'bit.bor',
    'body': 'bit.bor(${1:m}, ${2:n})'
  'bit.band':
    'prefix': 'bit.band',
    'body': 'bit.band(${1:m}, ${2:n})'
  'bit.bnot':
    'prefix': 'bit.bnot',
    'body': 'bit.bnot(${1:n})'
# CC 'Colors'
  'colors.combine':
    'prefix': 'colors.combine',
    'body': 'colors.combine(${1:color1}, ${2:color2,...})'
  'colors.subtract':
    'prefix': 'colors.subtract',
    'body': 'colors.subtract(${1:color1}, ${2:color2,...})'
  'colors.test':
    'prefix': 'colors.test',
    'body': 'colors.test(${1:colors...}, ${2:color})'
# CC 'Commands'
  'commands.exec':
    'prefix': 'commands.exec',
    'body': 'commands.exec("${1:command}")'
  'commands.execAsync':
    'prefix': 'commands.execAsync',
    'body': 'commands.execAsync("${1:command}")'
  'commands.list':
    'prefix': 'commands.list',
    'body': 'commands.list()'
  'commands.getBlockPosition':
    'prefix': 'commands.getBlockPosition',
    'body': 'commands.getBlockPosition()'
  'commands.getBlockInfo':
    'prefix': 'commands.getBlockInfo',
    'body': 'commands.getBlockInfo(${1:x}, ${2:y}, ${3:z})'
# CC 'Coroutine'
  'coroutine.create':
    'prefix': 'coroutine.create',
    'body': 'coroutine.create(${1:function_f})'
  'coroutine.resume':
    'prefix': 'coroutine.resume',
    'body': 'coroutine.resume(${1:coroutine,})'
  'coroutine.running':
    'prefix': 'coroutine.running',
    'body': 'coroutine.running()'
  'coroutine.status':
    'prefix': 'coroutine.status',
    'body': 'coroutine.status(${1:coroutine})'
  'coroutine.wrap':
    'prefix': 'coroutine.wrap',
    'body': 'coroutine.wrap(${1:function_f})'
  'coroutine.yield':
    'prefix': 'coroutine.yield',
    'body': 'coroutine.yield(${1:...})'
# CC 'Disk'
  'disk.isPresent':
    'prefix': 'disk.isPresent',
    'body': 'disk.isPresent("${1:side}")'
  'disk.hasData':
    'prefix': 'disk.hasData',
    'body': 'disk.hasData("${1:side}")'
  'disk.getMountPath':
    'prefix': 'disk.getMountPath',
    'body': 'disk.getMountPath("${1:side}")'
  'disk.setLabel':
    'prefix': 'disk.setLabel',
    'body': 'disk.setLabel("${1:side}", "${2:label...}")'
  'disk.getLabel':
    'prefix': 'disk.getLabel',
    'body': 'disk.getLabel("${1:side}")'
  'disk.getID':
    'prefix': 'disk.getID',
    'body': 'disk.getID("${1:side}")'
  'disk.hasAudio':
    'prefix': 'disk.hasAudio',
    'body': 'disk.hasAudio("${1:side}")'
  'disk.getAudioTitle':
    'prefix': 'disk.getAudioTitle',
    'body': 'disk.getAudioTitle("${1:side}")'
  'disk.playAudio':
    'prefix': 'disk.playAudio',
    'body': 'disk.playAudio("${1:side}")'
  'disk.stopAudio':
    'prefix': 'disk.stopAudio',
    'body': 'disk.stopAudio("${1:side}")'
  'disk.eject':
    'prefix': 'disk.eject',
    'body': 'disk.eject("${1:side}")'
# CC 'Fs'
  'fs.list':
    'prefix': 'fs.list',
    'body': 'fs.list("${1:path}")'
  'fs.exists':
    'prefix': 'fs.exists',
    'body': 'fs.exists("${1:path}")'
  'fs.isDir':
    'prefix': 'fs.isDir',
    'body': 'fs.isDir("${1:path}")'
  'fs.isReadOnly':
    'prefix': 'fs.isReadOnly',
    'body': 'fs.isReadOnly("${1:path}")'
  'fs.getName':
    'prefix': 'fs.getName',
    'body': 'fs.getName("${1:path}")'
  'fs.getDrive':
    'prefix': 'fs.getDrive',
    'body': 'fs.getDrive("${1:path}")'
  'fs.getSize':
    'prefix': 'fs.getSize',
    'body': 'fs.getSize("${1:path}")'
  'fs.getFreeSpace':
    'prefix': 'fs.getFreeSpace',
    'body': 'fs.getFreeSpace("${1:path}")'
  'fs.makeDir':
    'prefix': 'fs.makeDir',
    'body': 'fs.makeDir("${1:path}")'
  'fs.move':
    'prefix': 'fs.move',
    'body': 'fs.move("${1:path}", "${2:destination}")'
  'fs.copy':
    'prefix': 'fs.copy',
    'body': 'fs.copy("${1:path}", "${2:destination}")'
  'fs.delete':
    'prefix': 'fs.delete',
    'body': 'fs.delete("${1:path}")'
  'fs.combine':
    'prefix': 'fs.combine',
    'body': 'fs.combine("${1:base path}", "${2:local path}")'
  'fs.open':
    'prefix': 'fs.open',
    'body': 'fs.open("${1:path}", ${2:mode})'
  'fs.find':
    'prefix': 'fs.find',
    'body': 'fs.find(${1:wildcard})'
  'fs.getDir':
    'prefix': 'fs.getDir',
    'body': 'fs.getDir("${1:path}")'
  'fs.complete':
    'prefix': 'fs.complete',
#explicit booleans
    'body': 'fs.complete($"{1:partial name}", "${2:path...}", ${3:[include files?]}, ${[include '/'?]})'
  'fs.delete':
    'prefix': 'fs.delete',
    'body': 'fs.delete("${1:path}")'
# CC 'GPS'
  'gps.locate':
    'prefix': 'gps.locate',
    'body': 'gps.locate(${1:timeout}, ${2:[debug?]})'
# CC 'Help'
  'help.path':
    'prefix': 'help.path',
    'body': 'help.path()'
  'help.setPath':
    'prefix': 'help.setPath',
    'body': 'fs.setPath("${1:path}")'
  'help.lookup':
    'prefix': 'help.lookup',
    'body': 'help.lookup("${1:topic}")'
  'help.topics':
    'prefix': 'help.topics',
    'body': 'help.topics()'
# CC 'HTTP'
# Check to see if these are correct
  'http.request':
    'prefix': 'http.request',
    'body': 'http.request("${1:URL}", "${2:postData}", ${3:headers})'
  'http.get':
    'prefix': 'http.get',
    'body': 'http.get("${1:URL}", ${3:headers})'
  'http.post':
    'prefix': 'http.post',
    'body': 'http.post("${1:URL}", "${2:postData}", ${3:headers})'
# CC 'Keys'
  'keys.getName':
    'prefix': 'keys.getName',
    'body': 'keys.getName(${1:numCode})'
# CC 'Multishell'
  'multishell.getCurrent':
    'prefix': 'multishell.getCurrent',
    'body': 'multishell.getCurrent()'
  'multishell.getCount':
    'prefix': 'multishell.getCount',
    'body': 'multishell.getCount()'
  'multishell.launch':
    'prefix': 'multishell.launch',
    'body': 'multishell.launch({${1:environment}}, "${2:path...}", ${3:args})'
  'multishell.setFocus':
    'prefix': 'multishell.setFocus',
    'body': 'multishell.setFocus(${1:tabID})'
  'multishell.setTitle':
    'prefix': 'multishell.setTitle',
    'body': 'multishell.setTitle(${1:tabID}, "${2:title}")'
  'multishell.getTitle':
    'prefix': 'multishell.getTitle',
    'body': 'multishell.getTitle(${1:tabID})'
  'multishell.getFocus':
    'prefix': 'multishell.getFocus',
    'body': 'multishell.getFocus()'
# CC 'OS'
  'os.version':
    'prefix': 'os.version',
    'body': 'os.version()'
  'os.getComputerID':
    'prefix': 'os.getComputerID',
    'body': 'os.getComputerID()'
  'os.getComputerLabel':
    'prefix': 'os.getComputerLabel',
    'body': 'os.getComputerLabel()'
  'os.setComputerLabel':
    'prefix': 'os.setComputerLabel',
    'body': 'os.setComputerLabel("${1:label/nil}")'
  'os.run':
    'prefix': 'os.run',
    'body': 'os.run({${1:environment}}, "${2:path...}", ${3:args})'
  'os.loadAPI':
    'prefix': 'os.loadAPI',
    'body': 'os.loadAPI("${1:path}")'
  'os.unloadAPI':
    'prefix': 'os.unloadAPI',
    'body': 'os.unloadAPI("${1:name}")'
# Test this.
  'os.pullEvent':
    'prefix': 'os.pullEvent',
    'body': 'os.pullEvent("${1:target-event}"${2:, parameters})'
  'os.pullEventRaw':
    'prefix': 'os.pullEventRaw',
    'body': 'os.pullEventRaw("${1:target-event}"${2:, parameters}))'
  'os.queueEvent':
    'prefix': 'os.queueEvent',
    'body': 'os.queueEvent("${1:event}"${2:, parameters})'
  'os.clock':
    'prefix': 'os.clock',
    'body': 'os.clock()'
  'os.startTimer':
    'prefix': 'os.startTimer',
    'body': 'os.startTimer(${1:timeout})'
  'os.cancelTimer':
    'prefix': 'os.cancelTimer',
    'body': 'os.cancelTimer(${1:timerID})'
  'os.time':
    'prefix': 'os.time',
    'body': 'os.time()'
  'os.sleep':
    'prefix': 'os.sleep',
    'body': 'os.sleep(${time})'
  'os.day':
    'prefix': 'os.day',
    'body': 'os.day()'
  'os.setAlarm':
    'prefix': 'os.setAlarm',
    'body': 'os.setAlarm(${time})'
  'os.cancelAlarm':
    'prefix': 'os.cancelAlarm',
    'body': 'os.cancelAlarm(${alarmID})'
  'os.shutdown':
    'prefix': 'os.shutdown',
    'body': 'os.shutdown()'
  'os.reboot':
    'prefix': 'os.reboot',
    'body': 'os.reboot()'
# CC 'Paintutils'
# Have these tested.
  'paintutils.loadImage':
    'prefix': 'paintutils.loadImage',
    'body': 'paintutils.loadImage("${1:path}")'
  'paintutils.drawImage':
    'prefix': 'paintutils.drawImage',
    'body': 'paintutils.drawImage(${1:[image]}, ${2:x}, ${3:y})'
  'paintutils.drawPixel':
    'prefix': 'paintutils.drawPixel',
    'body': 'paintutils.drawPixel(${1:x}, ${2:y}, colors.${3:color})'
  'paintutils.drawLine':
    'prefix': 'paintutils.drawLine',
    'body': 'paintutils.drawLine(${1:startX}, ${2:Starty}, ${1:endX}, ${2:endy}, colors.${3:color})'
  'paintutils.drawBox':
    'prefix': 'paintutils.drawBox',
    'body': 'paintutils.drawBox(${1:startX}, ${2:Starty}, ${1:endX}, ${2:endy}, colors.${3:color})'
  'paintutils.drawFilledBox':
    'prefix': 'paintutils.drawFilledBox',
    'body': 'paintutils.drawFilledBox(${1:startX}, ${2:Starty}, ${1:endX}, ${2:endy}, colors.${3:color})'
# CC 'Parallel'
  'parallel.waitForAny':
    'prefix': 'parallel.waitForAny',
    'body': 'parallel.waitForAny(${1:function1}, ${2:function2,..})'
  'parallel.waitForAll':
    'prefix': 'parallel.waitForAll',
    'body': 'parallel.waitForAll(${1:function1}, ${2:function2,..})'
# CC 'Peripheral'
  'peripheral.isPresent':
    'prefix': 'peripheral.isPresent',
    'body': 'peripheral.isPresent("${1:side}")'
  'peripheral.getType':
    'prefix': 'peripheral.getType',
    'body': 'peripheral.getType("${1:side}")'
  'peripheral.getMethods':
    'prefix': 'peripheral.getMethods',
    'body': 'peripheral.getMethods("${1:side}")'
  'peripheral.call':
    'prefix': 'peripheral.call',
    'body': 'peripheral.call("${1:side}", ${2:method,...})'
  'peripheral.wrap':
    'prefix': 'peripheral.wrap',
    'body': 'peripheral.wrap("${1:side}")'
  'peripheral.find':
    'prefix': 'peripheral.find',
    'body': 'peripheral.find("${1:type}", ${2:function}(${3:name}, ${4:object}))'
  'peripheral.getNames':
    'prefix': 'peripheral.getNames',
    'body': 'peripheral.getNames()'
# CC Peripheral 'Command Block'
   'commandBlock.getCommand':
     'prefix': 'commandBlock.getCommand',
     'body': 'commandBlock.getCommand()'
   'commandBlock.setCommand':
     'prefix': 'commandBlock.setCommand',
     'body': 'commandBlock.commandBlock("${1:command}")'
   'commandBlock.runCommand':
     'prefix': 'commandBlock.runCommand',
     'body': 'commandBlock.runCommand()'
# CC Peripheral 'Computer'
   'computer.turnOn':
     'prefix': 'computer.turnOn',
     'body': 'computer.turnOn()'
   'computer.shutdown':
     'prefix': 'computer.shutdown',
     'body': 'computer.shutdown()'
   'computer.reboot':
     'prefix': 'computer.reboot',
     'body': 'computer.reboot()'
   'computer.getID':
     'prefix': 'computer.getID',
     'body': 'computer.getID()'
   'computer.isOn':
     'prefix': 'computer.isOn',
     'body': 'computer.isOn()'
# CC Peripheral 'Modem'
   'modem.isOpen':
     'prefix': 'modem.isOpen',
     'body': 'modem.isOpen(${1:channel})'
   'modem.open':
     'prefix': 'modem.open',
     'body': 'modem.open(${1:channel})'
   'modem.close':
     'prefix': 'modem.close',
     'body': 'modem.close(${1:channel})'
   'modem.closeAll':
     'prefix': 'modem.closeAll',
     'body': 'modem.closeAll()'
   'modem.transmit':
     'prefix': 'modem.transmit',
     'body': 'modem.transmit(${1:channel}, ${2:replyChannel}, ${3:message})'
   'modem.isWireless':
     'prefix': 'modem.isWireless',
     'body': 'modem.isWireless()'
# CC Peripheral 'Printer'
   'printer.newPage':
     'prefix': 'printer.newPage',
     'body': 'printer.newPage()'
   'printer.endPage':
     'prefix': 'printer.endPage',
     'body': 'printer.endPage()'
   'printer.write':
     'prefix': 'printer.write',
     'body': 'printer.write("${1:text}")'
   'printer.setCursorPos':
     'prefix': 'printer.setCursorPos',
     'body': 'printer.setCursorPos(${1:x}, ${2:y})'
   'printer.getCursorPos':
     'prefix': 'printer.getCursorPos',
     'body': 'printer.getCursorPos()'
   'printer.getPageSize':
     'prefix': 'printer.getPageSize',
     'body': 'printer.getPageSize()'
   'printer.setPageTitle':
     'prefix': 'printer.setPageTitle',
     'body': 'printer.setPageTitle("${1:title}")'
   'printer.getPaperLevel':
     'prefix': 'printer.getPaperLevel',
     'body': 'printer.getPaperLevel()'
   'printer.getInkLevel':
     'prefix': 'printer.getInkLevel',
     'body': 'printer.getInkLevel()'
# CC 'Rednet'
   'rednet.open':
     'prefix': 'rednet.open',
     'body': 'rednet.open("${1:side}")'
   'rednet.close':
     'prefix': 'rednet.close',
     'body': 'rednet.close("${1:side}")'
   'rednet.send':
     'prefix': 'rednet.send',
     'body': 'rednet.send(${1:receiverID}, ${2:message}, "${3:protocol}")'
   'rednet.broadcast':
     'prefix': 'rednet.broadcast',
     'body': 'rednet.broadcast(${1:message}, "${2:protocol}")'
   'rednet.receive':
     'prefix': 'rednet.receive',
     'body': 'rednet.receive("${1:protocolFilter}", ${2:timeout})'
   'rednet.isOpen':
     'prefix': 'rednet.isOpen',
     'body': 'rednet.isOpen("${1:side}")'
   'rednet.host':
     'prefix': 'rednet.host',
     'body': 'rednet.host("${1:protocol}", "${2:hostname}")'
   'rednet.run':
     'prefix': 'rednet.run',
     'body': 'rednet.run()'
# CC 'Redstone'
   'redstone.getSides':
     'prefix': 'redstone.getSides',
     'body': 'redstone.getSides()'
   'redstone.getInput':
     'prefix': 'redstone.getInput',
     'body': 'redstone.getInput("${1:side}")'
   'redstone.setOutput':
     'prefix': 'redstone.setOutput',
     'body': 'redstone.setOutput("${1:side}", ${2:True})'
   'redstone.getOutput':
     'prefix': 'redstone.getOutput',
     'body': 'redstone.getOutput("${1:side}")'
   'redstone.getAnalogInput':
     'prefix': 'redstone.getAnalogInput',
     'body': 'redstone.getAnalogInput("${1:side}")'
   'redstone.setAnalogOutput':
     'prefix': 'redstone.setAnalogOutput',
     'body': 'redstone.setAnalogOutput("${1:side}", ${2:strength})'
   'redstone.getAnalogOutput':
     'prefix': 'redstone.getAnalogOutput',
     'body': 'redstone.getAnalogOutput("${1:side}")'
   'redstone.getBundledInput':
     'prefix': 'redstone.getBundledInput',
     'body': 'redstone.getBundledInput("${1:side}")'
   'redstone.getBundledOutput':
     'prefix': 'redstone.getBundledOutput',
     'body': 'redstone.getBundledOutput("${1:side}")'
# Do people want to specify numbers for colors or use colors.(x)?
   'redstone.setBundledOutput':
     'prefix': 'redstone.setBundledOutput',
     'body': 'redstone.setBundledOutput("${1:side}", colors.${2:x})'
   'redstone.testBundledInput':
     'prefix': 'redstone.testBundledInput',
     'body': 'redstone.testBundledInput("${1:side}", colors.${2:x})'
# CC 'Shell'
   'shell.exit':
     'prefix': 'shell.exit',
     'body': 'shell.exit()'
   'shell.dir':
     'prefix': 'shell.dir',
     'body': 'shell.dir()'
   'shell.setDir':
     'prefix': 'shell.setDir',
     'body': 'shell.setDir("${1:path}")'
   'shell.path':
     'prefix': 'shell.path',
     'body': 'shell.path()'
   'shell.setPath':
     'prefix': 'shell.setPath',
     'body': 'shell.setPath("${1:path}")'
   'shell.resolve':
     'prefix': 'shell.resolve',
     'body': 'shell.resolve("${1:localPath}")'
   'shell.resolveProgram':
     'prefix': 'shell.resolveProgram',
     'body': 'shell.resolveProgram("${1:name}")'
   'shell.aliases':
     'prefix': 'shell.aliases',
     'body': 'shell.aliases()'
   'shell.setAlias':
     'prefix': 'shell.setAlias',
     'body': 'shell.setAlias("${1:alias}", "${2:program}")'
   'shell.clearAlias':
     'prefix': 'shell.clearAlias',
     'body': 'shell.clearAlias("${1:alias}")'
   'shell.programs':
     'prefix': 'shell.programs',
     'body': 'shell.programs(${1:[showHidden?]})'
   'shell.getRunningProgram':
     'prefix': 'shell.getRunningProgram',
     'body': 'shell.getRunningProgram()'
   'shell.run':
     'prefix': 'shell.run',
     'body': 'shell.run("${1:command}"${2:, "args..."})'
   'shell.openTab':
     'prefix': 'shell.openTab',
     'body': 'shell.openTab("${1:command}"${2:, "args..."})'
   'shell.switchTab':
     'prefix': 'shell.switchTab',
     'body': 'shell.switchTab(${1:tabID})'
# CC 'Term'
   'term.write':
     'prefix': 'term.write',
     'body': 'term.write("${1:text}")'
   'term.blit':
     'prefix': 'term.blit',
     'body': 'term.blit("${1:text}", "${2:colors}", "${3:bgColors}")'
   'term.clear':
     'prefix': 'term.clear',
     'body': 'term.clear()'
   'term.clearLine':
     'prefix': 'term.clearLine',
     'body': 'term.clearLine()'
   'term.getCursorPos':
     'prefix': 'term.getCursorPos',
     'body': 'term.getCursorPos(${1:x}, ${2:y})'
   'term.setCursorBlink':
     'prefix': 'term.setCursorBlink',
     'body': 'term.setCursorBlink(${1:[True]})'
   'term.isColor':
     'prefix': 'term.isColor',
     'body': 'term.isColor()'
   'term.write':
     'prefix': 'term.write',
     'body': 'term.write("${1:text}")'
   'term.blit':
     'prefix': 'term.blit',
     'body': 'term.blit("${1:text}", "${2:colors}", "${3:bgColors}")'
   'term.clear':
     'prefix': 'term.clear',
     'body': 'term.clear()'
   'term.clearLine':
     'prefix': 'term.clearLine',
     'body': 'term.clearLine()'
   'term.getCursorPos':
     'prefix': 'term.getCursorPos',
     'body': 'term.getCursorPos(${1:x}, ${2:y})'
   'term.setCursorBlink':
     'prefix': 'term.setCursorBlink',
     'body': 'term.setCursorBlink(${1:[True]})'
   'term.getSize':
     'prefix': 'term.getSize',
     'body': 'term.getSize()'
   'term.scroll':
     'prefix': 'term.scroll',
     'body': 'term.scroll(${1:n})'
   'term.redirect':
     'prefix': 'term.redirect',
     'body': 'term.redirect(${1:target})'
   'term.current':
     'prefix': 'term.current',
     'body': 'term.current()'
   'term.native':
     'prefix': 'term.native',
     'body': 'term.native()'
   'term.setTextColor':
     'prefix': 'term.setTextColor',
     'body': 'term.setTextColor(colors.${1:x})'
   'term.getTextColor':
     'prefix': 'term.getTextColor',
     'body': 'term.getTextColor()'
   'term.setBackgroundColor':
     'prefix': 'term.setBackgroundColor',
     'body': 'term.setBackgroundColor(colors.${1:x})'
   'term.getBackgroundColor':
     'prefix': 'term.getBackgroundColor',
     'body': 'term.getBackgroundColor()'
   'monitor.setTextScale':
     'prefix': 'monitor.setTextScale',
     'body': 'monitor.setTextScale(${1:scale})'
# CC 'Textutils'
   'textutils.slowWrite':
     'prefix': 'textutils.slowWrite',
     'body': 'textutils.slowWrite("${1:text}", ${2:rate})'
   'textutils.slowPrint':
     'prefix': 'textutils.slowPrint',
     'body': 'textutils.slowPrint("${1:text}", ${2:rate})'
   'textutils.formatTime':
     'prefix': 'textutils.formatTime',
     'body': 'textutils.formatTime(${1:time}, ${2:[24hr?]})'
   'textutils.tabulate':
     'prefix': 'textutils.tabulate',
     'body': 'textutils.tabulate(colors.${1:x}, {${2:table}}, colors.${3:y}, {${3:table}...})'
   'textutils.pagedTabulate':
     'prefix': 'textutils.pagedTabulate',
     'body': 'textutils.pagedTabulate(colors.${1:x}, {${2:table}}, colors.${3:y}, {${3:table}...})'
   'textutils.pagedPrint':
     'prefix': 'textutils.pagedPrint',
     'body': 'textutils.pagedPrint("${1:text}", ${2:freeLines})'
   'textutils.serialize':
     'prefix': 'textutils.serialize',
     'body': 'textutils.serialize(${1:...})'
   'textutils.unserialize':
     'prefix': 'textutils.unserialize',
     'body': 'textutils.unserialize("${1:serializedData}")'
   'textutils.serializeJSON':
     'prefix': 'textutils.serializeJSON',
     'body': 'textutils.serializeJSON(${1:...})'
   'textutils.urlEncode':
     'prefix': 'textutils.urlEncode',
     'body': 'textutils.urlEncode("${1:urlUnsafeString}")'
   'textutils.complete':
     'prefix': 'textutils.complete',
     'body': 'textutils.complete($"{1:partial name}", ${2:environment})'
# CC 'Turtle'
   'turtle.craft':
     'prefix': 'turtle.craft',
     'body': 'turtle.craft(${1:qty?})'
   'turtle.forward':
     'prefix': 'turtle.forward',
     'body': 'turtle.forward()'
   'turtle.back':
     'prefix': 'turtle.back',
     'body': 'turtle.back()'
   'turtle.up':
     'prefix': 'turtle.up',
     'body': 'turtle.up()'
   'turtle.down':
     'prefix': 'turtle.down',
     'body': 'turtle.down()'
   'turtle.turnLeft':
     'prefix': 'turtle.turnLeft',
     'body': 'turtle.turnLeft()'
   'turtle.turnRight':
     'prefix': 'turtle.turnRight',
     'body': 'turtle.turnRight()'
   'turtle.select':
     'prefix': 'turtle.select',
     'body': 'turtle.select(${1:slotNum})'
   'turtle.getSelectedSlot':
     'prefix': 'turtle.getSelectedSlot',
     'body': 'turtle.getSelectedSlot()'
   'turtle.getItemCount':
     'prefix': 'turtle.getItemCount',
     'body': 'turtle.getItemCount(${1:slotNum})'
   'turtle.getItemSpace':
     'prefix': 'turtle.getItemSpace',
     'body': 'turtle.getItemSpace(${1:slotNum})'
   'turtle.getItemDetail':
     'prefix': 'turtle.getItemDetail',
     'body': 'turtle.getItemDetail(${1:slotNum})'
   'turtle.equipLeft':
     'prefix': 'turtle.equipLeft',
     'body': 'turtle.equipLeft()'
   'turtle.equipRight':
     'prefix': 'turtle.equipRight',
     'body': 'turtle.equipRight()'
   'turtle.attack':
     'prefix': 'turtle.attack',
     'body': 'turtle.attack()'
   'turtle.attackUp':
     'prefix': 'turtle.attackUp',
     'body': 'turtle.attackUp()'
   'turtle.attackDown':
     'prefix': 'turtle.attackDown',
     'body': 'turtle.attackDown()'
   'turtle.dig':
     'prefix': 'turtle.dig',
     'body': 'turtle.dig()'
   'turtle.digUp':
     'prefix': 'turtle.digUp',
     'body': 'turtle.digUp()'
   'turtle.digDown':
     'prefix': 'turtle.digDown',
     'body': 'turtle.digDown()'
   'turtle.place':
     'prefix': 'turtle.place',
     'body': 'turtle.place()'
   'turtle.placeSign':
     'prefix': 'turtle.place',
     'body': 'turtle.place("${1:signText}")'
   'turtle.placeUp':
     'prefix': 'turtle.placeUp',
     'body': 'turtle.placeUp()'
   'turtle.placeDown':
     'prefix': 'turtle.placeDown',
     'body': 'turtle.placeDown()'
   'turtle.detect':
     'prefix': 'turtle.detect',
     'body': 'turtle.detect()'
   'turtle.detectUp':
     'prefix': 'turtle.detectUp',
     'body': 'turtle.detectUp()'
   'turtle.detectDown':
     'prefix': 'turtle.detectDown',
     'body': 'turtle.detectDown()'
   'turtle.inspect':
     'prefix': 'turtle.inspect',
     'body': 'turtle.inspect()'
   'turtle.inspectUp':
     'prefix': 'turtle.inspectUp',
     'body': 'turtle.inspectUp()'
   'turtle.inspectDown':
     'prefix': 'turtle.inspectDown',
     'body': 'turtle.inspectDown()'
   'turtle.compare':
     'prefix': 'turtle.compare',
     'body': 'turtle.compare()'
   'turtle.compareUp':
     'prefix': 'turtle.compareUp',
     'body': 'turtle.compareUp()'
   'turtle.compareDown':
     'prefix': 'turtle.compareDown',
     'body': 'turtle.compareDown()'
   'turtle.compareTo':
     'prefix': 'turtle.compareTo',
     'body': 'turtle.compareTo(${1:numSlot})'
   'turtle.drop':
     'prefix': 'turtle.drop',
     'body': 'turtle.drop(${1:count?})'
   'turtle.dropUp':
     'prefix': 'turtle.dropUp',
     'body': 'turtle.dropUp(${1:count?})'
   'turtle.dropDown':
     'prefix': 'turtle.dropDown',
     'body': 'turtle.dropDown(${1:count?})'
   'turtle.suck':
     'prefix': 'turtle.suck',
     'body': 'turtle.suck(${1:amount?})'
   'turtle.suckUp':
     'prefix': 'turtle.suckUp',
     'body': 'turtle.suckUp(${1:amount?})'
   'turtle.suckDown':
     'prefix': 'turtle.suckDown',
     'body': 'turtle.suckDown(${1:amount?})'
   'turtle.refuel':
     'prefix': 'turtle.refuel',
     'body': 'turtle.refuel(${1:qty?})'
   'turtle.getFuelLevel':
     'prefix': 'turtle.getFuelLevel',
     'body': 'turtle.getFuelLevel()'
   'turtle.getFuelLimit':
     'prefix': 'turtle.getFuelLimit',
     'body': 'turtle.getFuelLimit()'
   'turtle.transferTo':
     'prefix': 'turtle.transferTo',
     'body': 'turtle.transferTo(${1:slot}, ${2:qty?})'
# CC 'Vector'
   'vector.new':
     'prefix': 'vector.new',
     'body': 'vector.new(${1:x}, ${2:y}, ${3:z})'
# CC Window
   'window.create':
     'prefix': 'window.create',
     'body': 'window.create(${1:parentTerm}, ${2:xPos}, ${3:yPos}, ${4:width}, ${5:height}, ${6:[visible?]})'
   'window.setVisible':
     'prefix': 'window.setVisible',
     'body': 'window.setVisible(${1:True})'
   'window.redraw.':
     'prefix': 'window.redraw',
     'body': 'window.redraw()'
   'window.restoreCursor':
     'prefix': 'window.restoreCursor',
     'body': 'window.restoreCursor()'
   'window.getPosition':
     'prefix': 'window.getPosition',
     'body': 'window.getPosition()'
   'window.reposition':
     'prefix': 'window.reposition',
     'body': 'window.reposition(${1:xPos}, ${2:yPos}, ${3:width}, ${4:height})'
